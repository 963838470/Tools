<%-- 访问数据库的组件 --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%-- 参数 --%>
<%@ CodeTemplate ResponseEncoding="UTF-8" Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" %>

<%@ Property Name="命名空间" Type="String" Default="GMSWebApi.DAL" Category="基本设置" %>
<%@ Property Name="数据表" Type="SchemaExplorer.TableSchema" Default="" Category="基本设置" %>
using Dapper;
using GMSWebApi.Common;
using GMSWebApi.Model;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace <%=命名空间%>
{
    public partial class <%=GetDAL(数据表)%>
    {
        IDbConnection db = DapperHelper.GetConnection();

        public bool IsExist(object id)
        {
            int count = 0;
            string sql = "SELECT count(*) FROM <%=数据表.Name%> WHERE ID=@ID";
            object counter = db.ExecuteScalar(sql, new { ID = id });
            int.TryParse(counter.ToString(), out count);
            return count > 0;
        }

        /// <summary>
        /// 查询单条数据
        /// </summary>
        /// <param name="id">可以是int和string</param>
        /// <returns>实体</returns>
        public <%=GetModel(数据表)%> GetByID(object id)
        {
            string sql = @"SELECT <% for(int i=0;i<数据表.Columns.Count;i++) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } %>
                            FROM <%=数据表.Name%>
                            WHERE ID=@ID";
            return db.Query<<%=GetModel(数据表)%>>(sql, new { ID = id }).ToList().FirstOrDefault();
        }

        public List<<%=GetModel(数据表)%>> Get()
        {
            string sql = @"SELECT <% for(int i=0;i<数据表.Columns.Count;i++) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } %>
                            FROM <%=数据表.Name%>";
            return db.Query<<%=GetModel(数据表)%>>(sql).ToList();
        }

        /// <summary>
        /// 插入单条记录
        /// </summary>
        /// <param name="param">实体</param>
        /// <param name="transaction">事务对象</param>
        /// <returns>返回插入数据的ID</returns>
        public int Insert(<%=GetModel(数据表)%> param, IDbTransaction transaction = null)
        {
            int count = 0;
            string sql = @"INSERT INTO <%=数据表.Name%>
                            (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)
                            VALUES (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %>@<%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>);
                            SELECT SCOPE_IDENTITY();";
            object counter = db.ExecuteScalar(sql, param, transaction);
            int.TryParse(counter.ToString(), out count);
            return count;
        }

        /// <summary>
        /// 插入多条数据
        /// </summary>
        /// <param name="param">实体集合</param>
        /// <param name="transaction">事务对象</param>
        /// <returns>插入数据条数</returns>
        public int Insert(IEnumerable<<%=GetModel(数据表)%>> param, IDbTransaction transaction = null)
        {
            string sql = @"INSERT INTO <%=数据表.Name%>
                            (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)
                            VALUES (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %>@<%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)";
            return db.Execute(sql, param, transaction);
        }

        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="param">实体</param>
        /// <param name="transaction">事务对象</param>
        /// <returns>更新数据行数</returns>
        public int Update(<%= GetModel(数据表) %> param, IDbTransaction transaction = null)
        {
            string sql = @"UPDATE <%=数据表.Name%>
                            SET <% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(数据表.Columns[i].Name != "ID") { %><%=数据表.Columns[i].Name+"=@"+数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% }%><% } %>
                            WHERE ID=@ID";
            return db.Execute(sql, param, transaction);
        }

        /// <summary>
        /// 删除单条数据
        /// </summary>
        /// <param name="id">可以是int和string</param>
        /// <param name="transaction">事务对象</param>
        /// <returns>删除的行数</returns>
        public int Delete(object id, IDbTransaction transaction = null)
        {
            string sql = "DELETE FROM <%=数据表.Name%> WHERE ID=@ID";
            return db.Execute(sql, new { ID = id }, transaction);
        }

        /// <summary>
        /// 删除多条数据
        /// </summary>
        /// <param name="ids">多个主键ID</param>
        /// <param name="transaction">事务对象</param>
        /// <returns>删除的行数</returns>
        public int Delete(IEnumerable<int> ids, IDbTransaction transaction = null)
        {
            string sql = "DELETE FROM <%=数据表.Name%> WHERE ID in @ID";
            return db.Execute(sql, new { ID = ids }, transaction);
        }
    }
}
<script runat="template">
	public string GetDAL(TableSchema table)
	{
		return (table.Name.Substring(table.Name.IndexOf("_") + 1)).Replace("_","") + "DAL";
	}
    public string GetModel(TableSchema table)
	{
		return (table.Name.Substring(table.Name.IndexOf("_") + 1)).Replace("_","") + "Info";
	}
    public override string GetFileName()
    {
        return GetDAL(数据表) + ".cs";
    }
    
    #region 获取列类型和默认值
    /// <summary>
    /// 获取C#数据类型默认值
    /// </summary>
    /// <param name="column">ColumnSchema:列对象，列数据类型</param>
    /// <returns>C#数据类型默认值</returns>
	public string GetParseValue(ColumnSchema col)
	{
		switch (col.DataType)
		{
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
            case DbType.String:
			case DbType.StringFixedLength:
                return "dataReader[\"" + col.Name + "\"].ToString()";
			case DbType.Boolean: 
                return "Convert.ToBoolean(dataReader[\"" + col.Name + "\"])";
			case DbType.Byte: 
                return "Convert.ToByte(dataReader[\"" + col.Name + "\"])";
			case DbType.Date: 
			case DbType.DateTime:
            case DbType.DateTime2:
            case DbType.Time:
                return "Convert.ToDateTime(dataReader[\"" + col.Name + "\"])";
            case DbType.Currency:
			case DbType.Decimal:
			case DbType.Double: 
			case DbType.Int32:
            case DbType.UInt32:
            case DbType.VarNumeric:
                return "Convert.ToInt32(dataReader[\"" + col.Name + "\"])";
            case DbType.UInt16:
            case DbType.Int16:
                return "Convert.ToInt16(dataReader[\"" + col.Name + "\"])";
            case DbType.Int64:
            case DbType.UInt64:
                return "Convert.ToInt64(dataReader[\"" + col.Name + "\"])";
			case DbType.Guid: 
                return "Guid.NewGuid()";
			case DbType.Object: 
                return "dataReader[\"" + col.Name + "\"]";
			case DbType.SByte: 
			case DbType.Single: 
			case DbType.Binary: 
                return "0";
			default:
				return "__UNKNOWN__" + col.NativeType;
		}
	}
    #endregion
</script>
