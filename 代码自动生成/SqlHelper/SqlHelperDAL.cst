<%-- 访问数据库的组件 --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%-- 参数 --%>
<%@ CodeTemplate ResponseEncoding="UTF-8" Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" %>

<%@ Property Name="命名空间" Type="String" Default="HuaweiSoftware.TYDAL" Category="基本设置" %>
<%@ Property Name="数据表" Type="SchemaExplorer.TableSchema" Default="" Category="基本设置" %>
//***************************************************
//Author : chenbo
//Description : 本文件由CodeSmith工具自动生成，请勿修改
//***************************************************
using HuaweiSoftware.TYCommon;
using HuaweiSoftware.TYModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;

namespace <%=命名空间%>
{
    public partial class <%= GetDAL(数据表) %>
    {
        private <%= GetModel(数据表) %> DataRowToEntity(DataRow row)
        {
            <%= GetModel(数据表) %> info = new <%= GetModel(数据表) %>();
        	<%
        		foreach(ColumnSchema col in 数据表.Columns)
                {
            %>
            info.<%= col.Name %> = <%= GetParseValue(col) %>;
            <%         
                }
            %>

            return info;
        }

        public bool IsExist(object id)
        {
            int count = 0;
            string sql = "SELECT count(*) FROM <%=数据表.Name%> WHERE ID=@id";
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("id",id),
            };
            object counter = SqlHelper.ExecuteScalar(sql, param);
            int.TryParse(counter.ToString(), out count);

            return count > 0;
        }

        public <%= GetModel(数据表) %> FindByID(object id)
        {
            <%= GetModel(数据表) %> result = null;
            string sql = @"SELECT <% for(int i=0;i<数据表.Columns.Count;i++) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } %>
                            FROM <%=数据表.Name%>
                            WHERE ID=@id";
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("id",id),
            };
            DataTable table = SqlHelper.ExecuteDataset(sql, param).Tables[0];
            if (table != null && table.Rows.Count > 0)
            {
                result = DataRowToEntity(table.Rows[0]);
            }

            return result;
        }

        public List<<%= GetModel(数据表) %>> Find(string filterStr = null, SqlParameter[] param = null, string orderFields = null)
        {
            List<<%= GetModel(数据表) %>> result = new List<<%= GetModel(数据表) %>>();
            string sql = @"SELECT <% for(int i=0;i<数据表.Columns.Count;i++) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } %>
                            FROM <%=数据表.Name%>";
            if (filterStr != null)
            {
                sql += " Where " + filterStr;
            }
            if (orderFields != null)
            {
                sql += " Order By " + orderFields;
            }
            DataTable table = SqlHelper.ExecuteDataset(sql, param).Tables[0];
            if (table != null && table.Rows.Count > 0)
            {
                foreach (DataRow row in table.Rows)
                {
                    result.Add(DataRowToEntity(row));
                }
            }

            return result;
        }

        public int Insert(<%= GetModel(数据表) %> model)
        {
        <%if(((bool)数据表.Columns[0].ExtendedProperties["CS_IsIdentity"].Value) == true) { %>
            int count = 0;
            string sql = @"INSERT INTO <%=数据表.Name%>
                        (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)
                        VALUES (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %>@<%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>);
                        SELECT SCOPE_IDENTITY();";
            SqlParameter[] param = new SqlParameter[]
            {
                <% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) {%>new SqlParameter("<%=数据表.Columns[i].Name%>",model.<%=数据表.Columns[i].Name+"),"+((i>=数据表.Columns.Count-1)?"":"\r\n                ")%><% } } %>
            };
            object counter = SqlHelper.ExecuteScalar(sql, param);
            int.TryParse(counter.ToString(), out count);
            return count;
        <% } else { %>
            string sql = @"INSERT INTO <%=数据表.Name%>
                        (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %><%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)
                        VALUES (<% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) { %>@<%=数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% } } %>)";
            SqlParameter[] param = new SqlParameter[]
            {
                <% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(((bool)数据表.Columns[i].ExtendedProperties["CS_IsIdentity"].Value) == false) {%>new SqlParameter("<%=数据表.Columns[i].Name%>",model.<%=数据表.Columns[i].Name+"),"+((i>=数据表.Columns.Count-1)?"":"\r\n                ")%><% } } %>
            };
            SqlHelper.ExecuteNonQuery(sql, param);
            return model.ID;
        <% } %>
        }

        public int Update(<%= GetModel(数据表) %> model)
        {
            string sql = @"UPDATE <%=数据表.Name%>
                            SET <% for(int i=0;i<数据表.Columns.Count;i++) { %><%if(数据表.Columns[i].Name != "ID") { %><%=数据表.Columns[i].Name+"=@"+数据表.Columns[i].Name + ((i>=数据表.Columns.Count-1)?"":",")%><% }%><% } %>
                            WHERE ID=@ID";
            SqlParameter[] param = new SqlParameter[]
            {
                <% for(int i=0;i<数据表.Columns.Count;i++) { %>new SqlParameter("<%=数据表.Columns[i].Name%>",model.<%=数据表.Columns[i].Name+"),"+((i>=数据表.Columns.Count-1)?"":"\r\n                ")%><% } %>
            };

            return SqlHelper.ExecuteNonQuery(sql, param);
        }

        public int Delete(object id)
        {
            string sql = "DELETE FROM <%=数据表.Name%> WHERE ID=@id";
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("id",id),
            };

            return SqlHelper.ExecuteNonQuery(sql, param);
        }
    }
}
<script runat="template">
	public string GetDAL(TableSchema table)
	{
		return (table.Name.Substring(table.Name.IndexOf("_") + 1)).Replace("_","") + "DAL";
	}
    public string GetModel(TableSchema table)
	{
		return (table.Name.Substring(table.Name.IndexOf("_") + 1)).Replace("_","") + "Info";
	}
    public override string GetFileName()
    {
        return GetDAL(数据表) + ".cs";
    }
    
    #region 获取列类型和默认值
    /// <summary>
    /// 获取C#数据类型默认值
    /// </summary>
    /// <param name="column">ColumnSchema:列对象，列数据类型</param>
    /// <returns>C#数据类型默认值</returns>
	public string GetParseValue(ColumnSchema col)
	{
		switch (col.DataType)
		{
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
            case DbType.String:
			case DbType.StringFixedLength:
                return "row[\"" + col.Name + "\"].ToString()";
			case DbType.Boolean: 
                return "Convert.ToBoolean(row[\"" + col.Name + "\"])";
			case DbType.Byte: 
                return "Convert.ToByte(row[\"" + col.Name + "\"])";
			case DbType.Date: 
			case DbType.DateTime:
            case DbType.DateTime2:
            case DbType.Time:
                return "Convert.ToDateTime(row[\"" + col.Name + "\"])";
            case DbType.Currency:
			case DbType.Decimal:
			case DbType.Double: 
			case DbType.Int32:
            case DbType.UInt32:
            case DbType.VarNumeric:
                if(col.AllowDBNull) {
                    return "Convert.ToInt32(row[\"" + col.Name + "\"] as string)";    
                } else {
                    return "Convert.ToInt32(row[\"" + col.Name + "\"])";
                }
            case DbType.UInt16:
            case DbType.Int16:
                if(col.AllowDBNull) {
                    return "Convert.ToInt16(row[\"" + col.Name + "\"] as string)";    
                } else {
                    return "Convert.ToInt16(row[\"" + col.Name + "\"])";
                }
            case DbType.Int64:
            case DbType.UInt64:
                if(col.AllowDBNull) {
                    return "Convert.ToInt64(row[\"" + col.Name + "\"] as string)";    
                } else {
                    return "Convert.ToInt64(row[\"" + col.Name + "\"])";
                }
			case DbType.Guid: 
                return "Guid.NewGuid()";
			case DbType.Object: 
                return "row[\"" + col.Name + "\"]";
			case DbType.SByte: 
			case DbType.Single: 
			case DbType.Binary: 
                return "0";
			default:
				return "__UNKNOWN__" + col.NativeType;
		}
	}
    #endregion
</script>
